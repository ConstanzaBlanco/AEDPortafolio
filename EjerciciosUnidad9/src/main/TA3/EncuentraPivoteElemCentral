1) Orden del tiempo de ejecución
Tiempo:

Esta función tiene complejidad O(1) (tiempo constante).

Solo realiza una suma y una división por 2.

En el contexto de Quicksort:

El tiempo total del Quicksort no cambia por esta operación.

El impacto real está en la elección del pivote, que afecta cuántas
comparaciones totales hace el algoritmo. Si el pivote resulta ser
bueno (cerca de la mediana), mantiene O(n log n); si es malo (muy desbalanceado),
puede llegar a O(n²).

2) Conveniencia comparativa
   Es muy rápido de calcular (solo una línea), pero puede producir particiones
   muy desbalanceadas si el array ya está ordenado o casi ordenado, porque siempre
   elige el del medio.

   Esto puede degradar a O(n²) en casos adversos.

   Es recomendable cuando los datos están distribuidos aleatoriamente, pero no si
   están ordenados o casi ordenados.

3) Seudocódigo:
Funcion encuentraPivoteElemCentral(izq, der, entrada)
      Retornar (izq + der) / 2
  FinFuncion
